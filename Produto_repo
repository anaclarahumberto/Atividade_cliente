import sqlite3
from typing import List, Optional
from models.produto import Produto
from sql.produto import *
from util.conexao import criar_conexao


class ProdutoRepo:
    @classmethod
    def criar_tabela(cls) -> bool:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                cursor.execute(SQL_CRIAR_TABELA)
                return True
        except sqlite3.Error as e:
            print(e)
            return False       
#Cursor de uma conexão é o objeto que executa comandos SQL
    @classmethod
    def inserir(cls, produto: Produto) -> Optional[Produto]:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                cursor.execute(SQL_INSERIR, (produto.nome, produto.preco, produto.descricao))
                if cursor.rowcount > 0:
                    produto.id = cursor.lastrowid #retorna o último id que foi autoincrementado, gerado pelo banco
                    return produto
        except sqlite3.Error as e:
            print(e)
            return None
        
    @classmethod
    def obter_todos(cls) -> List[Produto]:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                tuplas = cursor.execute(SQL_OBTER_TODOS).fetchall() #retorna uma lista de tuplas, onde cada tupla representa um registro da tabela
                produtos = [Produto(*t) for t in tuplas]
                return produtos
        except sqlite3.Error as e:
            print(e)
            return None
        
    @classmethod
    def alterar(cls, produto: Produto) -> bool:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                cursor.execute(SQL_ALTERAR, (produto.nome, produto.preco, produto.descricao, produto.id))
                if cursor.rowcount > 0: #quantas linhas foram alteradas/se foi bem sucedido o comando
                    return True
        except sqlite3.Error as e:
            print(e)
            return False
        
    @classmethod
    def excluir(cls, id: int) -> bool:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                cursor.execute(SQL_EXCLUIR, (id,)) #quando passar um único valor, precisa colocar , no final da tupla
                if cursor.rowcount > 0: 
                    return True
        except sqlite3.Error as e:
            print(e)
            return False
        
    @classmethod
    def obter_um(cls, id: int) -> Optional[Produto]:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                tupla = cursor.execute(SQL_OBTER_UM, (id,)).fetchone() #quando retorna apenas 1 valor
                produto = Produto(*tupla)
                return produto
        except sqlite3.Error as e:
            print(e)
            return None
        
    @classmethod
    def obter_quantidade(cls) -> Optional[int]:
        try:
            with criar_conexao() as conexao:
                cursor = conexao.cursor()
                tupla = cursor.execute(SQL_OBTER_QUANTIDADE).fetchone() #quando retorna apenas 1 valor
                quantidade = int(tupla[0])
                return quantidade
        except sqlite3.Error as e:
            print(e)
            return None
